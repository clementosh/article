/*commentaires en CSS*/
/* Pour faire le commentaire en CSS on met /* (votre texte de commentaire) puis*/

h1 {
    color:red;
}
body
{
    background-color:greenyellow;
}
/*Alors retournos maintenant à nos sélecteurs. Jusqu'à maintenant nous n'avons manipulé que des sélecteurs que l'on appelle sélecteurs simples; 
car ils correspondent en fait à des élments HTML, comme par exemple p, h1, donc des éléments HTML qui n'ont pas d'attribut.
donc ces types des sélecteurs doivent être préférés tant que possible pour des raisons d'optimisation et de performance du code.
En effet, ces sélecteurs qui ont moins de codes demandent moins en moins l'énergie.
et ça fait donc que la page s'affichera plus rapidement et avec des sélecteurs plus complexes*/
/* Le problème maintenant c'est qu'on.......... 
En effet, comment on fait pour appliquer un style différent à des éléments de même type?, ....
par exemple appliquer un style différent à 2 paragraphes.
Ce n'est tout simplement pas possible. 
C'est donc pour cela qu'on a créé deux attributs que sont: les attributs "class" et "id" 

    -Alors "Class" et "id" sont donc deux attributs HTML qui ont été créés pour pouvoir appliquer différents styles à des éléments de même type.
    - "class" également permet de faire l'inverse et  d'appliquer le même style à différents éléments choisis.
    Alors, voyons tout de suite comment cela fonctionne ... 01:09:30*/
    /*Alors premièrement on se place dans une balise ouvrante HTML, ensuite on y met "class", par ex. <p class="premierp"
    ensuite, on retourne au fichier CSS et cette fois-ci on va devoir commencer notre déclaration par un point (.).
    alors, à chaque fois qu'on utilisera l'attribut "class", il faudra utiliser un point au début de la déclaration dans le fichier CSS.
    Après le point, on écrit la valeur de notre attribut,ici premierp, et ensuite on écrit notre déclaration; 
    par exemple si je veux changer la couleur, j'écris tout simplement "color"*/

.premierp{
    color:yellow;
}
.cepencouleur{
    color:brown;
}
/*Alors, on voyons maintenant comment ça fonctionne avec l'attribut "id".

Donc on va commencer par faire la même chose, donc se placer dans la balise d'un élément (HTML), et on va écrire l'attribut "id" avec la valeur que l'on souhaite, 
par exemple moi ici je vais écrire <p id="deuxiemep" (alors, essayez de ne pas mettre un caractère spécial, comme l'accent. donc pas d'accent ni espace).
Ensuite, on retourne encore une fois sur notre fichier CSS, et cette fois ci on va commencer non pas par un point, mais par un dièse (#).
Donc, à chaque fois qu'au aura "id", il faudra commencer par un #.*/

#deuxiemep {
    color:tomato;
}
/* Donc vous vous rappellez que, avec les ancres c'est le même # que nous avons utilisé encore avec "id"; donc c'est le même principe.
Je vous ai dit que "class" permet également d'appliquer le même style à différents éléments.
alors, comment? R/ Tout simplement on attribue la même valeur à deux attributs de "class" différents, et donc les éléments ciblés du même style.
Alors, voyons maintenant comment cela s'applique.
Pour l'exemple, voir fichier html <li Son origine>.

Alors, vous devez peut-être vous demander: pourquoi avoir "id" et "class" et pas que "class" dans ce cas? 
Alors, au fait il y a une différence entre "class" et "id". 
Une seule différence: c'est qu'un "id" en fait, avec une valeur précise, ne doit être utilisé qu'une seule fois par page.
Rappellez-vous, en effet, des ancres, imaginez qu'on ait deux "id" identiques. Alors dans ce cas je me demande où est ce que l'ancre amenerait tel code.
ça poserait donc de problème de code,evidemment, puisqu'au fait l'ancre ramenerait à un code qu'on connait pas.
ce qui a fait que "id" soit préféré pour les éléments uniques dans la page web, comme un logo par exemple.
donc l'"id" avec une valeur precise doit être utilisé une seule fois par page. */

        /*IV. AUTRES ELEMENTS DE HTML*/

/* Cependant, donc on est toujours un tout petit peu limités au niveau de nos sélecteurs: cas appliqués aux styles, cas du contenu concernant les balises pour le moment;
En effet, on ne peut pas pour le moment appliquer du style à un mot d'un titre, par exemple h1.
Donc, C'est pour remedier à ce problème que l'on a écrit deux nouveaux élément en HTML qui n'on aucune valeur sémantique, mais qui servent seulement de conteneurs.
Ces éléments sont donc: les éléments "div" et "span".
Alors, attention, comme je viens de le dire, "div" et "span" n'ont pas de valeur sémantique. Ce qui va, au fait, à l'encontre même  du rôle du HTML. 
Donc, ce sont des éléments à n'utiliser que si vous n'avez pas d'autre choix.
Il sera toujours aprécié de s'en passer si c'est possible. 
Donc utilisez les éléments "div" et "span" que si vous n'avez pas d'autre choix. 
Alors comment on utilse les éléments "div" et "span"? 
    - On place tout simplement les balises autour du contenu auquel on veut donner un style, 
    - puis on applique les attributs "class" ou "id" avec une valeur, comme on vient de le voir.
Par exemple:*/

.montitre {
        color:black;
}

        /*ELEMENTS DE TYPES BLOCK & INLINE*/
/*Alors, comme vous en doutez, il y a également une différence entre les éléments "span" et "div".
En effet, donc, l'un est de type "block" et l'autre est de type "inline". on va devoir voir tout de suite ce que cela signifie.
En HTML, 
 Tout élément, en HTML, soit soit un élément de type block, soit un élément de type inline.
 En l'occurencence ici: 
                     Div= (est un) élément de type block
                     Span = élément de type inline.*/ 

        /*Différences entre les éléments du type block et les éléments du type inline*/

 /*Alors, quelles sont les différences entre les éléments du type block et les éléments du type inline?*/

       /* 2. DIFFERENCES ENTRE LES ELEMENTS DU TYPE BLOCK ET LES ELEMENTS DU TYPE INLINE
                <!-- Les éléments de type block...
                    - Commencent sur une nouvelle ligne,
                    - Occupent toute la largeur disponible, 
                    - Peuvent être imbriqués les uns dans les autres et peuvent contenir dees éléments de type inline.
                -->
                <!-- Les éléments de type inline...
                    - Ne commencent pas sur une nouvelle ligne,
                    - Occupent seulement la largeur nécessaire, 
                    - Peuvent contenir d'autres éléments de type inline mais pas d'éléments de type block. */
                
        /* <!-- Alors, voyons quelques exemples un peu plus clairs de ces éléments
                
                - Eléments block: - p; h1, h2, h3, h4...; header, article, footer; ol, ul, dl; table.
                - Eléménts inline: em; strong, mark, a; img. */
        
                /* 3. SELECTEURS AVANCES
                   voir le contenu dans HTML*/
                /* 4. L'HERITAGE*/

body {
    color:gray;
}
        /* Alors retenez bien cette notion d'héritage qui est vraiment crucial dans la compréhension du langage CSS.
        Voilà pour notre introduction qui se termine ici, rendez-vous au prochain cours, la Partie II de notre cours complet sur les HTML et CSS*/ 

        /*<h1> PARTIE II. FORMATER DU TEXTE ET POSITIONNER LES ELEMETS</h1>*/
.para1 {
    font-size:30px;
}
.para2 {
    font-size: 2.3em; 
}
